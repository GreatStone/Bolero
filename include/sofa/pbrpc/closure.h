#ifndef _SOFA_PBRPC_CLOSURE_H_
#define _SOFA_PBRPC_CLOSURE_H_

/////////////////////////////////////////////////////
// DO NOT EDIT!!!
// this header file is auto generated by perl script
// edit the generator if necessary
/////////////////////////////////////////////////////

/////////////////////////////////////////////////////
// This `Closure' only support pre-bind arguments.
// Use `ExtClosure' if you need post-bind arguments.
/////////////////////////////////////////////////////

/////////////////////////////////////////////////////
// Support:
// 1, Compatible with google::protobuf::Closure.
// 2, Support pre-bind for general function and class
//    method, up to 10 arguments.
// 3, Support pass argument by reference, though bind
//    always by value.
// 4, When bind class method, support use
//    "sofa::pbrpc::shared_ptr" as this pointer of class.
// 5, Support create temporary and permanent closure:
//    Temporary closure (self destoryed after call):
//        NewClosure();
//    Permanent closure (do not destoryed by self):
//        NewPermanentClosure();
/////////////////////////////////////////////////////

/////////////////////////////////////////////////////
// Usage:
// 1, General function:
//    
//    void f1(int pre_arg, double post_arg);
//    Closure* c1 = NewClosure(&f1, 1, 2.0);
//    c1->Run(2.0);
//    
// 2, Class method:
//    
//    class ClassA
//    {
//        public:
//            int m1(int pre_arg, double post_arg);
//    };
//    ClassA obj;
//    Closure* c3 = NewClosure(&obj, &ClassA::m1, 1, 2.0);
//    c3->Run();
//    
//    class ClassB : public sofa::pbrpc::enable_shared_from_this<ClassB>
//    {
//        public:
//            int m1(int pre_arg, double post_arg);
//     
//            void m2()
//            {
//                Closure* c4 = NewClosure(shared_from_this(), &ClassB::m1, 1, 2.0);
//                c4->Run(2.0);
//            }
//    };
//    sofa::pbrpc::shared_ptr<ClassB> ptr(new ClassB);
//    Closure* c5 = NewClosure(ptr, &ClassB::m1, 1, 2.0);
//    c5->Run();
//    
/////////////////////////////////////////////////////

#include <google/protobuf/stubs/common.h>
#include <sofa/pbrpc/closure_helper.h>

namespace sofa {
namespace pbrpc{

/// base class for all Closures
class ClosureBase : public google::protobuf::Closure
{
public:
    virtual ~ClosureBase() {}
    virtual bool IsSelfDelete() const = 0;
};
////////////////////////////////////////////////////
//////////// class method closures /////////////////
////////////////////////////////////////////////////

template <bool SelfDeleting, typename ClassPointer, typename MethodClass>
class MethodClosure_Bind0 : public ClosureBase {
public:
    typedef void (MethodClass::*MethodType)();
    MethodClosure_Bind0(ClassPointer object, MethodType method):
        m_object(object), m_method(method) {}
    virtual void Run() {
        ConditionalAutoDeleter<SelfDeleting, MethodClosure_Bind0> self_deleter(this);
        return (get_pointer(m_object)->*m_method)();
    }
    virtual bool IsSelfDelete() const { return SelfDeleting; }
private:
    ClassPointer m_object;
    MethodType m_method;
};

template <bool SelfDeleting, typename ClassPointer, typename MethodClass, typename PreArg1>
class MethodClosure_Bind1 : public ClosureBase {
public:
    typedef void (MethodClass::*MethodType)(PreArg1);
    MethodClosure_Bind1(ClassPointer object, MethodType method, PreArg1 pa1):
        m_object(object), m_method(method), m_pa1(pa1) {}
    virtual void Run() {
        ConditionalAutoDeleter<SelfDeleting, MethodClosure_Bind1> self_deleter(this);
        return (get_pointer(m_object)->*m_method)(m_pa1);
    }
    virtual bool IsSelfDelete() const { return SelfDeleting; }
private:
    ClassPointer m_object;
    MethodType m_method;
    typename ParamTraits<PreArg1>::StorageType m_pa1;
};

template <bool SelfDeleting, typename ClassPointer, typename MethodClass, typename PreArg1, typename PreArg2>
class MethodClosure_Bind2 : public ClosureBase {
public:
    typedef void (MethodClass::*MethodType)(PreArg1, PreArg2);
    MethodClosure_Bind2(ClassPointer object, MethodType method, PreArg1 pa1, PreArg2 pa2):
        m_object(object), m_method(method), m_pa1(pa1), m_pa2(pa2) {}
    virtual void Run() {
        ConditionalAutoDeleter<SelfDeleting, MethodClosure_Bind2> self_deleter(this);
        return (get_pointer(m_object)->*m_method)(m_pa1, m_pa2);
    }
    virtual bool IsSelfDelete() const { return SelfDeleting; }
private:
    ClassPointer m_object;
    MethodType m_method;
    typename ParamTraits<PreArg1>::StorageType m_pa1;
    typename ParamTraits<PreArg2>::StorageType m_pa2;
};

template <bool SelfDeleting, typename ClassPointer, typename MethodClass, typename PreArg1, typename PreArg2, typename PreArg3>
class MethodClosure_Bind3 : public ClosureBase {
public:
    typedef void (MethodClass::*MethodType)(PreArg1, PreArg2, PreArg3);
    MethodClosure_Bind3(ClassPointer object, MethodType method, PreArg1 pa1, PreArg2 pa2, PreArg3 pa3):
        m_object(object), m_method(method), m_pa1(pa1), m_pa2(pa2), m_pa3(pa3) {}
    virtual void Run() {
        ConditionalAutoDeleter<SelfDeleting, MethodClosure_Bind3> self_deleter(this);
        return (get_pointer(m_object)->*m_method)(m_pa1, m_pa2, m_pa3);
    }
    virtual bool IsSelfDelete() const { return SelfDeleting; }
private:
    ClassPointer m_object;
    MethodType m_method;
    typename ParamTraits<PreArg1>::StorageType m_pa1;
    typename ParamTraits<PreArg2>::StorageType m_pa2;
    typename ParamTraits<PreArg3>::StorageType m_pa3;
};

template <bool SelfDeleting, typename ClassPointer, typename MethodClass, typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4>
class MethodClosure_Bind4 : public ClosureBase {
public:
    typedef void (MethodClass::*MethodType)(PreArg1, PreArg2, PreArg3, PreArg4);
    MethodClosure_Bind4(ClassPointer object, MethodType method, PreArg1 pa1, PreArg2 pa2, PreArg3 pa3, PreArg4 pa4):
        m_object(object), m_method(method), m_pa1(pa1), m_pa2(pa2), m_pa3(pa3), m_pa4(pa4) {}
    virtual void Run() {
        ConditionalAutoDeleter<SelfDeleting, MethodClosure_Bind4> self_deleter(this);
        return (get_pointer(m_object)->*m_method)(m_pa1, m_pa2, m_pa3, m_pa4);
    }
    virtual bool IsSelfDelete() const { return SelfDeleting; }
private:
    ClassPointer m_object;
    MethodType m_method;
    typename ParamTraits<PreArg1>::StorageType m_pa1;
    typename ParamTraits<PreArg2>::StorageType m_pa2;
    typename ParamTraits<PreArg3>::StorageType m_pa3;
    typename ParamTraits<PreArg4>::StorageType m_pa4;
};

template <bool SelfDeleting, typename ClassPointer, typename MethodClass, typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5>
class MethodClosure_Bind5 : public ClosureBase {
public:
    typedef void (MethodClass::*MethodType)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5);
    MethodClosure_Bind5(ClassPointer object, MethodType method, PreArg1 pa1, PreArg2 pa2, PreArg3 pa3, PreArg4 pa4, PreArg5 pa5):
        m_object(object), m_method(method), m_pa1(pa1), m_pa2(pa2), m_pa3(pa3), m_pa4(pa4), m_pa5(pa5) {}
    virtual void Run() {
        ConditionalAutoDeleter<SelfDeleting, MethodClosure_Bind5> self_deleter(this);
        return (get_pointer(m_object)->*m_method)(m_pa1, m_pa2, m_pa3, m_pa4, m_pa5);
    }
    virtual bool IsSelfDelete() const { return SelfDeleting; }
private:
    ClassPointer m_object;
    MethodType m_method;
    typename ParamTraits<PreArg1>::StorageType m_pa1;
    typename ParamTraits<PreArg2>::StorageType m_pa2;
    typename ParamTraits<PreArg3>::StorageType m_pa3;
    typename ParamTraits<PreArg4>::StorageType m_pa4;
    typename ParamTraits<PreArg5>::StorageType m_pa5;
};

template <bool SelfDeleting, typename ClassPointer, typename MethodClass, typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6>
class MethodClosure_Bind6 : public ClosureBase {
public:
    typedef void (MethodClass::*MethodType)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6);
    MethodClosure_Bind6(ClassPointer object, MethodType method, PreArg1 pa1, PreArg2 pa2, PreArg3 pa3, PreArg4 pa4, PreArg5 pa5, PreArg6 pa6):
        m_object(object), m_method(method), m_pa1(pa1), m_pa2(pa2), m_pa3(pa3), m_pa4(pa4), m_pa5(pa5), m_pa6(pa6) {}
    virtual void Run() {
        ConditionalAutoDeleter<SelfDeleting, MethodClosure_Bind6> self_deleter(this);
        return (get_pointer(m_object)->*m_method)(m_pa1, m_pa2, m_pa3, m_pa4, m_pa5, m_pa6);
    }
    virtual bool IsSelfDelete() const { return SelfDeleting; }
private:
    ClassPointer m_object;
    MethodType m_method;
    typename ParamTraits<PreArg1>::StorageType m_pa1;
    typename ParamTraits<PreArg2>::StorageType m_pa2;
    typename ParamTraits<PreArg3>::StorageType m_pa3;
    typename ParamTraits<PreArg4>::StorageType m_pa4;
    typename ParamTraits<PreArg5>::StorageType m_pa5;
    typename ParamTraits<PreArg6>::StorageType m_pa6;
};

template <bool SelfDeleting, typename ClassPointer, typename MethodClass, typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6, typename PreArg7>
class MethodClosure_Bind7 : public ClosureBase {
public:
    typedef void (MethodClass::*MethodType)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7);
    MethodClosure_Bind7(ClassPointer object, MethodType method, PreArg1 pa1, PreArg2 pa2, PreArg3 pa3, PreArg4 pa4, PreArg5 pa5, PreArg6 pa6, PreArg7 pa7):
        m_object(object), m_method(method), m_pa1(pa1), m_pa2(pa2), m_pa3(pa3), m_pa4(pa4), m_pa5(pa5), m_pa6(pa6), m_pa7(pa7) {}
    virtual void Run() {
        ConditionalAutoDeleter<SelfDeleting, MethodClosure_Bind7> self_deleter(this);
        return (get_pointer(m_object)->*m_method)(m_pa1, m_pa2, m_pa3, m_pa4, m_pa5, m_pa6, m_pa7);
    }
    virtual bool IsSelfDelete() const { return SelfDeleting; }
private:
    ClassPointer m_object;
    MethodType m_method;
    typename ParamTraits<PreArg1>::StorageType m_pa1;
    typename ParamTraits<PreArg2>::StorageType m_pa2;
    typename ParamTraits<PreArg3>::StorageType m_pa3;
    typename ParamTraits<PreArg4>::StorageType m_pa4;
    typename ParamTraits<PreArg5>::StorageType m_pa5;
    typename ParamTraits<PreArg6>::StorageType m_pa6;
    typename ParamTraits<PreArg7>::StorageType m_pa7;
};

template <bool SelfDeleting, typename ClassPointer, typename MethodClass, typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6, typename PreArg7, typename PreArg8>
class MethodClosure_Bind8 : public ClosureBase {
public:
    typedef void (MethodClass::*MethodType)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8);
    MethodClosure_Bind8(ClassPointer object, MethodType method, PreArg1 pa1, PreArg2 pa2, PreArg3 pa3, PreArg4 pa4, PreArg5 pa5, PreArg6 pa6, PreArg7 pa7, PreArg8 pa8):
        m_object(object), m_method(method), m_pa1(pa1), m_pa2(pa2), m_pa3(pa3), m_pa4(pa4), m_pa5(pa5), m_pa6(pa6), m_pa7(pa7), m_pa8(pa8) {}
    virtual void Run() {
        ConditionalAutoDeleter<SelfDeleting, MethodClosure_Bind8> self_deleter(this);
        return (get_pointer(m_object)->*m_method)(m_pa1, m_pa2, m_pa3, m_pa4, m_pa5, m_pa6, m_pa7, m_pa8);
    }
    virtual bool IsSelfDelete() const { return SelfDeleting; }
private:
    ClassPointer m_object;
    MethodType m_method;
    typename ParamTraits<PreArg1>::StorageType m_pa1;
    typename ParamTraits<PreArg2>::StorageType m_pa2;
    typename ParamTraits<PreArg3>::StorageType m_pa3;
    typename ParamTraits<PreArg4>::StorageType m_pa4;
    typename ParamTraits<PreArg5>::StorageType m_pa5;
    typename ParamTraits<PreArg6>::StorageType m_pa6;
    typename ParamTraits<PreArg7>::StorageType m_pa7;
    typename ParamTraits<PreArg8>::StorageType m_pa8;
};

template <bool SelfDeleting, typename ClassPointer, typename MethodClass, typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6, typename PreArg7, typename PreArg8, typename PreArg9>
class MethodClosure_Bind9 : public ClosureBase {
public:
    typedef void (MethodClass::*MethodType)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8, PreArg9);
    MethodClosure_Bind9(ClassPointer object, MethodType method, PreArg1 pa1, PreArg2 pa2, PreArg3 pa3, PreArg4 pa4, PreArg5 pa5, PreArg6 pa6, PreArg7 pa7, PreArg8 pa8, PreArg9 pa9):
        m_object(object), m_method(method), m_pa1(pa1), m_pa2(pa2), m_pa3(pa3), m_pa4(pa4), m_pa5(pa5), m_pa6(pa6), m_pa7(pa7), m_pa8(pa8), m_pa9(pa9) {}
    virtual void Run() {
        ConditionalAutoDeleter<SelfDeleting, MethodClosure_Bind9> self_deleter(this);
        return (get_pointer(m_object)->*m_method)(m_pa1, m_pa2, m_pa3, m_pa4, m_pa5, m_pa6, m_pa7, m_pa8, m_pa9);
    }
    virtual bool IsSelfDelete() const { return SelfDeleting; }
private:
    ClassPointer m_object;
    MethodType m_method;
    typename ParamTraits<PreArg1>::StorageType m_pa1;
    typename ParamTraits<PreArg2>::StorageType m_pa2;
    typename ParamTraits<PreArg3>::StorageType m_pa3;
    typename ParamTraits<PreArg4>::StorageType m_pa4;
    typename ParamTraits<PreArg5>::StorageType m_pa5;
    typename ParamTraits<PreArg6>::StorageType m_pa6;
    typename ParamTraits<PreArg7>::StorageType m_pa7;
    typename ParamTraits<PreArg8>::StorageType m_pa8;
    typename ParamTraits<PreArg9>::StorageType m_pa9;
};

template <bool SelfDeleting, typename ClassPointer, typename MethodClass, typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6, typename PreArg7, typename PreArg8, typename PreArg9, typename PreArg10>
class MethodClosure_Bind10 : public ClosureBase {
public:
    typedef void (MethodClass::*MethodType)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8, PreArg9, PreArg10);
    MethodClosure_Bind10(ClassPointer object, MethodType method, PreArg1 pa1, PreArg2 pa2, PreArg3 pa3, PreArg4 pa4, PreArg5 pa5, PreArg6 pa6, PreArg7 pa7, PreArg8 pa8, PreArg9 pa9, PreArg10 pa10):
        m_object(object), m_method(method), m_pa1(pa1), m_pa2(pa2), m_pa3(pa3), m_pa4(pa4), m_pa5(pa5), m_pa6(pa6), m_pa7(pa7), m_pa8(pa8), m_pa9(pa9), m_pa10(pa10) {}
    virtual void Run() {
        ConditionalAutoDeleter<SelfDeleting, MethodClosure_Bind10> self_deleter(this);
        return (get_pointer(m_object)->*m_method)(m_pa1, m_pa2, m_pa3, m_pa4, m_pa5, m_pa6, m_pa7, m_pa8, m_pa9, m_pa10);
    }
    virtual bool IsSelfDelete() const { return SelfDeleting; }
private:
    ClassPointer m_object;
    MethodType m_method;
    typename ParamTraits<PreArg1>::StorageType m_pa1;
    typename ParamTraits<PreArg2>::StorageType m_pa2;
    typename ParamTraits<PreArg3>::StorageType m_pa3;
    typename ParamTraits<PreArg4>::StorageType m_pa4;
    typename ParamTraits<PreArg5>::StorageType m_pa5;
    typename ParamTraits<PreArg6>::StorageType m_pa6;
    typename ParamTraits<PreArg7>::StorageType m_pa7;
    typename ParamTraits<PreArg8>::StorageType m_pa8;
    typename ParamTraits<PreArg9>::StorageType m_pa9;
    typename ParamTraits<PreArg10>::StorageType m_pa10;
};

////////////////////////////////////////////////////
//////////// nomal function closures ///////////////n////////////////////////////////////////////////////

template <bool SelfDeleting>
class FunctionClosure_Bind0 : public ClosureBase {
public:
    typedef void (*FunctionType)();
    FunctionClosure_Bind0(FunctionType function):
        m_function(function) {}
    virtual void Run() {
        ConditionalAutoDeleter<SelfDeleting, FunctionClosure_Bind0> self_deleter(this);
        return m_function();
    }
    virtual bool IsSelfDelete() const { return SelfDeleting; }
private:
    FunctionType m_function;
};

template <bool SelfDeleting, typename PreArg1>
class FunctionClosure_Bind1 : public ClosureBase {
public:
    typedef void (*FunctionType)(PreArg1);
    FunctionClosure_Bind1(FunctionType function, PreArg1 pa1):
        m_function(function), m_pa1(pa1) {}
    virtual void Run() {
        ConditionalAutoDeleter<SelfDeleting, FunctionClosure_Bind1> self_deleter(this);
        return m_function(m_pa1);
    }
    virtual bool IsSelfDelete() const { return SelfDeleting; }
private:
    FunctionType m_function;
    typename ParamTraits<PreArg1>::StorageType m_pa1;
};

template <bool SelfDeleting, typename PreArg1, typename PreArg2>
class FunctionClosure_Bind2 : public ClosureBase {
public:
    typedef void (*FunctionType)(PreArg1, PreArg2);
    FunctionClosure_Bind2(FunctionType function, PreArg1 pa1, PreArg2 pa2):
        m_function(function), m_pa1(pa1), m_pa2(pa2) {}
    virtual void Run() {
        ConditionalAutoDeleter<SelfDeleting, FunctionClosure_Bind2> self_deleter(this);
        return m_function(m_pa1, m_pa2);
    }
    virtual bool IsSelfDelete() const { return SelfDeleting; }
private:
    FunctionType m_function;
    typename ParamTraits<PreArg1>::StorageType m_pa1;
    typename ParamTraits<PreArg2>::StorageType m_pa2;
};

template <bool SelfDeleting, typename PreArg1, typename PreArg2, typename PreArg3>
class FunctionClosure_Bind3 : public ClosureBase {
public:
    typedef void (*FunctionType)(PreArg1, PreArg2, PreArg3);
    FunctionClosure_Bind3(FunctionType function, PreArg1 pa1, PreArg2 pa2, PreArg3 pa3):
        m_function(function), m_pa1(pa1), m_pa2(pa2), m_pa3(pa3) {}
    virtual void Run() {
        ConditionalAutoDeleter<SelfDeleting, FunctionClosure_Bind3> self_deleter(this);
        return m_function(m_pa1, m_pa2, m_pa3);
    }
    virtual bool IsSelfDelete() const { return SelfDeleting; }
private:
    FunctionType m_function;
    typename ParamTraits<PreArg1>::StorageType m_pa1;
    typename ParamTraits<PreArg2>::StorageType m_pa2;
    typename ParamTraits<PreArg3>::StorageType m_pa3;
};

template <bool SelfDeleting, typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4>
class FunctionClosure_Bind4 : public ClosureBase {
public:
    typedef void (*FunctionType)(PreArg1, PreArg2, PreArg3, PreArg4);
    FunctionClosure_Bind4(FunctionType function, PreArg1 pa1, PreArg2 pa2, PreArg3 pa3, PreArg4 pa4):
        m_function(function), m_pa1(pa1), m_pa2(pa2), m_pa3(pa3), m_pa4(pa4) {}
    virtual void Run() {
        ConditionalAutoDeleter<SelfDeleting, FunctionClosure_Bind4> self_deleter(this);
        return m_function(m_pa1, m_pa2, m_pa3, m_pa4);
    }
    virtual bool IsSelfDelete() const { return SelfDeleting; }
private:
    FunctionType m_function;
    typename ParamTraits<PreArg1>::StorageType m_pa1;
    typename ParamTraits<PreArg2>::StorageType m_pa2;
    typename ParamTraits<PreArg3>::StorageType m_pa3;
    typename ParamTraits<PreArg4>::StorageType m_pa4;
};

template <bool SelfDeleting, typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5>
class FunctionClosure_Bind5 : public ClosureBase {
public:
    typedef void (*FunctionType)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5);
    FunctionClosure_Bind5(FunctionType function, PreArg1 pa1, PreArg2 pa2, PreArg3 pa3, PreArg4 pa4, PreArg5 pa5):
        m_function(function), m_pa1(pa1), m_pa2(pa2), m_pa3(pa3), m_pa4(pa4), m_pa5(pa5) {}
    virtual void Run() {
        ConditionalAutoDeleter<SelfDeleting, FunctionClosure_Bind5> self_deleter(this);
        return m_function(m_pa1, m_pa2, m_pa3, m_pa4, m_pa5);
    }
    virtual bool IsSelfDelete() const { return SelfDeleting; }
private:
    FunctionType m_function;
    typename ParamTraits<PreArg1>::StorageType m_pa1;
    typename ParamTraits<PreArg2>::StorageType m_pa2;
    typename ParamTraits<PreArg3>::StorageType m_pa3;
    typename ParamTraits<PreArg4>::StorageType m_pa4;
    typename ParamTraits<PreArg5>::StorageType m_pa5;
};

template <bool SelfDeleting, typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6>
class FunctionClosure_Bind6 : public ClosureBase {
public:
    typedef void (*FunctionType)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6);
    FunctionClosure_Bind6(FunctionType function, PreArg1 pa1, PreArg2 pa2, PreArg3 pa3, PreArg4 pa4, PreArg5 pa5, PreArg6 pa6):
        m_function(function), m_pa1(pa1), m_pa2(pa2), m_pa3(pa3), m_pa4(pa4), m_pa5(pa5), m_pa6(pa6) {}
    virtual void Run() {
        ConditionalAutoDeleter<SelfDeleting, FunctionClosure_Bind6> self_deleter(this);
        return m_function(m_pa1, m_pa2, m_pa3, m_pa4, m_pa5, m_pa6);
    }
    virtual bool IsSelfDelete() const { return SelfDeleting; }
private:
    FunctionType m_function;
    typename ParamTraits<PreArg1>::StorageType m_pa1;
    typename ParamTraits<PreArg2>::StorageType m_pa2;
    typename ParamTraits<PreArg3>::StorageType m_pa3;
    typename ParamTraits<PreArg4>::StorageType m_pa4;
    typename ParamTraits<PreArg5>::StorageType m_pa5;
    typename ParamTraits<PreArg6>::StorageType m_pa6;
};

template <bool SelfDeleting, typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6, typename PreArg7>
class FunctionClosure_Bind7 : public ClosureBase {
public:
    typedef void (*FunctionType)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7);
    FunctionClosure_Bind7(FunctionType function, PreArg1 pa1, PreArg2 pa2, PreArg3 pa3, PreArg4 pa4, PreArg5 pa5, PreArg6 pa6, PreArg7 pa7):
        m_function(function), m_pa1(pa1), m_pa2(pa2), m_pa3(pa3), m_pa4(pa4), m_pa5(pa5), m_pa6(pa6), m_pa7(pa7) {}
    virtual void Run() {
        ConditionalAutoDeleter<SelfDeleting, FunctionClosure_Bind7> self_deleter(this);
        return m_function(m_pa1, m_pa2, m_pa3, m_pa4, m_pa5, m_pa6, m_pa7);
    }
    virtual bool IsSelfDelete() const { return SelfDeleting; }
private:
    FunctionType m_function;
    typename ParamTraits<PreArg1>::StorageType m_pa1;
    typename ParamTraits<PreArg2>::StorageType m_pa2;
    typename ParamTraits<PreArg3>::StorageType m_pa3;
    typename ParamTraits<PreArg4>::StorageType m_pa4;
    typename ParamTraits<PreArg5>::StorageType m_pa5;
    typename ParamTraits<PreArg6>::StorageType m_pa6;
    typename ParamTraits<PreArg7>::StorageType m_pa7;
};

template <bool SelfDeleting, typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6, typename PreArg7, typename PreArg8>
class FunctionClosure_Bind8 : public ClosureBase {
public:
    typedef void (*FunctionType)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8);
    FunctionClosure_Bind8(FunctionType function, PreArg1 pa1, PreArg2 pa2, PreArg3 pa3, PreArg4 pa4, PreArg5 pa5, PreArg6 pa6, PreArg7 pa7, PreArg8 pa8):
        m_function(function), m_pa1(pa1), m_pa2(pa2), m_pa3(pa3), m_pa4(pa4), m_pa5(pa5), m_pa6(pa6), m_pa7(pa7), m_pa8(pa8) {}
    virtual void Run() {
        ConditionalAutoDeleter<SelfDeleting, FunctionClosure_Bind8> self_deleter(this);
        return m_function(m_pa1, m_pa2, m_pa3, m_pa4, m_pa5, m_pa6, m_pa7, m_pa8);
    }
    virtual bool IsSelfDelete() const { return SelfDeleting; }
private:
    FunctionType m_function;
    typename ParamTraits<PreArg1>::StorageType m_pa1;
    typename ParamTraits<PreArg2>::StorageType m_pa2;
    typename ParamTraits<PreArg3>::StorageType m_pa3;
    typename ParamTraits<PreArg4>::StorageType m_pa4;
    typename ParamTraits<PreArg5>::StorageType m_pa5;
    typename ParamTraits<PreArg6>::StorageType m_pa6;
    typename ParamTraits<PreArg7>::StorageType m_pa7;
    typename ParamTraits<PreArg8>::StorageType m_pa8;
};

template <bool SelfDeleting, typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6, typename PreArg7, typename PreArg8, typename PreArg9>
class FunctionClosure_Bind9 : public ClosureBase {
public:
    typedef void (*FunctionType)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8, PreArg9);
    FunctionClosure_Bind9(FunctionType function, PreArg1 pa1, PreArg2 pa2, PreArg3 pa3, PreArg4 pa4, PreArg5 pa5, PreArg6 pa6, PreArg7 pa7, PreArg8 pa8, PreArg9 pa9):
        m_function(function), m_pa1(pa1), m_pa2(pa2), m_pa3(pa3), m_pa4(pa4), m_pa5(pa5), m_pa6(pa6), m_pa7(pa7), m_pa8(pa8), m_pa9(pa9) {}
    virtual void Run() {
        ConditionalAutoDeleter<SelfDeleting, FunctionClosure_Bind9> self_deleter(this);
        return m_function(m_pa1, m_pa2, m_pa3, m_pa4, m_pa5, m_pa6, m_pa7, m_pa8, m_pa9);
    }
    virtual bool IsSelfDelete() const { return SelfDeleting; }
private:
    FunctionType m_function;
    typename ParamTraits<PreArg1>::StorageType m_pa1;
    typename ParamTraits<PreArg2>::StorageType m_pa2;
    typename ParamTraits<PreArg3>::StorageType m_pa3;
    typename ParamTraits<PreArg4>::StorageType m_pa4;
    typename ParamTraits<PreArg5>::StorageType m_pa5;
    typename ParamTraits<PreArg6>::StorageType m_pa6;
    typename ParamTraits<PreArg7>::StorageType m_pa7;
    typename ParamTraits<PreArg8>::StorageType m_pa8;
    typename ParamTraits<PreArg9>::StorageType m_pa9;
};

template <bool SelfDeleting, typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6, typename PreArg7, typename PreArg8, typename PreArg9, typename PreArg10>
class FunctionClosure_Bind10 : public ClosureBase {
public:
    typedef void (*FunctionType)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8, PreArg9, PreArg10);
    FunctionClosure_Bind10(FunctionType function, PreArg1 pa1, PreArg2 pa2, PreArg3 pa3, PreArg4 pa4, PreArg5 pa5, PreArg6 pa6, PreArg7 pa7, PreArg8 pa8, PreArg9 pa9, PreArg10 pa10):
        m_function(function), m_pa1(pa1), m_pa2(pa2), m_pa3(pa3), m_pa4(pa4), m_pa5(pa5), m_pa6(pa6), m_pa7(pa7), m_pa8(pa8), m_pa9(pa9), m_pa10(pa10) {}
    virtual void Run() {
        ConditionalAutoDeleter<SelfDeleting, FunctionClosure_Bind10> self_deleter(this);
        return m_function(m_pa1, m_pa2, m_pa3, m_pa4, m_pa5, m_pa6, m_pa7, m_pa8, m_pa9, m_pa10);
    }
    virtual bool IsSelfDelete() const { return SelfDeleting; }
private:
    FunctionType m_function;
    typename ParamTraits<PreArg1>::StorageType m_pa1;
    typename ParamTraits<PreArg2>::StorageType m_pa2;
    typename ParamTraits<PreArg3>::StorageType m_pa3;
    typename ParamTraits<PreArg4>::StorageType m_pa4;
    typename ParamTraits<PreArg5>::StorageType m_pa5;
    typename ParamTraits<PreArg6>::StorageType m_pa6;
    typename ParamTraits<PreArg7>::StorageType m_pa7;
    typename ParamTraits<PreArg8>::StorageType m_pa8;
    typename ParamTraits<PreArg9>::StorageType m_pa9;
    typename ParamTraits<PreArg10>::StorageType m_pa10;
};

////////////////////////////////////////////////////
//////// Closure create helper functions ///////////
////////////////////////////////////////////////////
//////////// for class method //////////////////////

template <typename ClassPointer, typename MethodClass>
ClosureBase* NewClosure(ClassPointer object, void(MethodClass::*method)()) {
    return new MethodClosure_Bind0<true, ClassPointer, MethodClass>(object, method);
}

template <typename ClassPointer, typename MethodClass, typename PreArg1>
ClosureBase* NewClosure(ClassPointer object, void(MethodClass::*method)(PreArg1)
        , typename ParamTraits<PreArg1>::ForwardType pa1) {
    return new MethodClosure_Bind1<true, ClassPointer, MethodClass, PreArg1>(object, method, pa1);
}

template <typename ClassPointer, typename MethodClass, typename PreArg1, typename PreArg2>
ClosureBase* NewClosure(ClassPointer object, void(MethodClass::*method)(PreArg1, PreArg2)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2) {
    return new MethodClosure_Bind2<true, ClassPointer, MethodClass, PreArg1, PreArg2>(object, method, pa1, pa2);
}

template <typename ClassPointer, typename MethodClass, typename PreArg1, typename PreArg2, typename PreArg3>
ClosureBase* NewClosure(ClassPointer object, void(MethodClass::*method)(PreArg1, PreArg2, PreArg3)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3) {
    return new MethodClosure_Bind3<true, ClassPointer, MethodClass, PreArg1, PreArg2, PreArg3>(object, method, pa1, pa2, pa3);
}

template <typename ClassPointer, typename MethodClass, typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4>
ClosureBase* NewClosure(ClassPointer object, void(MethodClass::*method)(PreArg1, PreArg2, PreArg3, PreArg4)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3
        , typename ParamTraits<PreArg4>::ForwardType pa4) {
    return new MethodClosure_Bind4<true, ClassPointer, MethodClass, PreArg1, PreArg2, PreArg3, PreArg4>(object, method, pa1, pa2, pa3, pa4);
}

template <typename ClassPointer, typename MethodClass, typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5>
ClosureBase* NewClosure(ClassPointer object, void(MethodClass::*method)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3
        , typename ParamTraits<PreArg4>::ForwardType pa4
        , typename ParamTraits<PreArg5>::ForwardType pa5) {
    return new MethodClosure_Bind5<true, ClassPointer, MethodClass, PreArg1, PreArg2, PreArg3, PreArg4, PreArg5>(object, method, pa1, pa2, pa3, pa4, pa5);
}

template <typename ClassPointer, typename MethodClass, typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6>
ClosureBase* NewClosure(ClassPointer object, void(MethodClass::*method)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3
        , typename ParamTraits<PreArg4>::ForwardType pa4
        , typename ParamTraits<PreArg5>::ForwardType pa5
        , typename ParamTraits<PreArg6>::ForwardType pa6) {
    return new MethodClosure_Bind6<true, ClassPointer, MethodClass, PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6>(object, method, pa1, pa2, pa3, pa4, pa5, pa6);
}

template <typename ClassPointer, typename MethodClass, typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6, typename PreArg7>
ClosureBase* NewClosure(ClassPointer object, void(MethodClass::*method)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3
        , typename ParamTraits<PreArg4>::ForwardType pa4
        , typename ParamTraits<PreArg5>::ForwardType pa5
        , typename ParamTraits<PreArg6>::ForwardType pa6
        , typename ParamTraits<PreArg7>::ForwardType pa7) {
    return new MethodClosure_Bind7<true, ClassPointer, MethodClass, PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7>(object, method, pa1, pa2, pa3, pa4, pa5, pa6, pa7);
}

template <typename ClassPointer, typename MethodClass, typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6, typename PreArg7, typename PreArg8>
ClosureBase* NewClosure(ClassPointer object, void(MethodClass::*method)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3
        , typename ParamTraits<PreArg4>::ForwardType pa4
        , typename ParamTraits<PreArg5>::ForwardType pa5
        , typename ParamTraits<PreArg6>::ForwardType pa6
        , typename ParamTraits<PreArg7>::ForwardType pa7
        , typename ParamTraits<PreArg8>::ForwardType pa8) {
    return new MethodClosure_Bind8<true, ClassPointer, MethodClass, PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8>(object, method, pa1, pa2, pa3, pa4, pa5, pa6, pa7, pa8);
}

template <typename ClassPointer, typename MethodClass, typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6, typename PreArg7, typename PreArg8, typename PreArg9>
ClosureBase* NewClosure(ClassPointer object, void(MethodClass::*method)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8, PreArg9)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3
        , typename ParamTraits<PreArg4>::ForwardType pa4
        , typename ParamTraits<PreArg5>::ForwardType pa5
        , typename ParamTraits<PreArg6>::ForwardType pa6
        , typename ParamTraits<PreArg7>::ForwardType pa7
        , typename ParamTraits<PreArg8>::ForwardType pa8
        , typename ParamTraits<PreArg9>::ForwardType pa9) {
    return new MethodClosure_Bind9<true, ClassPointer, MethodClass, PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8, PreArg9>(object, method, pa1, pa2, pa3, pa4, pa5, pa6, pa7, pa8, pa9);
}

template <typename ClassPointer, typename MethodClass, typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6, typename PreArg7, typename PreArg8, typename PreArg9, typename PreArg10>
ClosureBase* NewClosure(ClassPointer object, void(MethodClass::*method)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8, PreArg9, PreArg10)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3
        , typename ParamTraits<PreArg4>::ForwardType pa4
        , typename ParamTraits<PreArg5>::ForwardType pa5
        , typename ParamTraits<PreArg6>::ForwardType pa6
        , typename ParamTraits<PreArg7>::ForwardType pa7
        , typename ParamTraits<PreArg8>::ForwardType pa8
        , typename ParamTraits<PreArg9>::ForwardType pa9
        , typename ParamTraits<PreArg10>::ForwardType pa10) {
    return new MethodClosure_Bind10<true, ClassPointer, MethodClass, PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8, PreArg9, PreArg10>(object, method, pa1, pa2, pa3, pa4, pa5, pa6, pa7, pa8, pa9, pa10);
}

////////////////////////////////////////////////////
//////// Closure create helper functions ///////////
////////////////////////////////////////////////////
//////////// for class method //////////////////////

template <typename ClassPointer, typename MethodClass>
ClosureBase* NewPermanentClosure(ClassPointer object, void(MethodClass::*method)()) {
    return new MethodClosure_Bind0<false, ClassPointer, MethodClass>(object, method);
}

template <typename ClassPointer, typename MethodClass, typename PreArg1>
ClosureBase* NewPermanentClosure(ClassPointer object, void(MethodClass::*method)(PreArg1)
        , typename ParamTraits<PreArg1>::ForwardType pa1) {
    return new MethodClosure_Bind1<false, ClassPointer, MethodClass, PreArg1>(object, method, pa1);
}

template <typename ClassPointer, typename MethodClass, typename PreArg1, typename PreArg2>
ClosureBase* NewPermanentClosure(ClassPointer object, void(MethodClass::*method)(PreArg1, PreArg2)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2) {
    return new MethodClosure_Bind2<false, ClassPointer, MethodClass, PreArg1, PreArg2>(object, method, pa1, pa2);
}

template <typename ClassPointer, typename MethodClass, typename PreArg1, typename PreArg2, typename PreArg3>
ClosureBase* NewPermanentClosure(ClassPointer object, void(MethodClass::*method)(PreArg1, PreArg2, PreArg3)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3) {
    return new MethodClosure_Bind3<false, ClassPointer, MethodClass, PreArg1, PreArg2, PreArg3>(object, method, pa1, pa2, pa3);
}

template <typename ClassPointer, typename MethodClass, typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4>
ClosureBase* NewPermanentClosure(ClassPointer object, void(MethodClass::*method)(PreArg1, PreArg2, PreArg3, PreArg4)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3
        , typename ParamTraits<PreArg4>::ForwardType pa4) {
    return new MethodClosure_Bind4<false, ClassPointer, MethodClass, PreArg1, PreArg2, PreArg3, PreArg4>(object, method, pa1, pa2, pa3, pa4);
}

template <typename ClassPointer, typename MethodClass, typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5>
ClosureBase* NewPermanentClosure(ClassPointer object, void(MethodClass::*method)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3
        , typename ParamTraits<PreArg4>::ForwardType pa4
        , typename ParamTraits<PreArg5>::ForwardType pa5) {
    return new MethodClosure_Bind5<false, ClassPointer, MethodClass, PreArg1, PreArg2, PreArg3, PreArg4, PreArg5>(object, method, pa1, pa2, pa3, pa4, pa5);
}

template <typename ClassPointer, typename MethodClass, typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6>
ClosureBase* NewPermanentClosure(ClassPointer object, void(MethodClass::*method)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3
        , typename ParamTraits<PreArg4>::ForwardType pa4
        , typename ParamTraits<PreArg5>::ForwardType pa5
        , typename ParamTraits<PreArg6>::ForwardType pa6) {
    return new MethodClosure_Bind6<false, ClassPointer, MethodClass, PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6>(object, method, pa1, pa2, pa3, pa4, pa5, pa6);
}

template <typename ClassPointer, typename MethodClass, typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6, typename PreArg7>
ClosureBase* NewPermanentClosure(ClassPointer object, void(MethodClass::*method)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3
        , typename ParamTraits<PreArg4>::ForwardType pa4
        , typename ParamTraits<PreArg5>::ForwardType pa5
        , typename ParamTraits<PreArg6>::ForwardType pa6
        , typename ParamTraits<PreArg7>::ForwardType pa7) {
    return new MethodClosure_Bind7<false, ClassPointer, MethodClass, PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7>(object, method, pa1, pa2, pa3, pa4, pa5, pa6, pa7);
}

template <typename ClassPointer, typename MethodClass, typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6, typename PreArg7, typename PreArg8>
ClosureBase* NewPermanentClosure(ClassPointer object, void(MethodClass::*method)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3
        , typename ParamTraits<PreArg4>::ForwardType pa4
        , typename ParamTraits<PreArg5>::ForwardType pa5
        , typename ParamTraits<PreArg6>::ForwardType pa6
        , typename ParamTraits<PreArg7>::ForwardType pa7
        , typename ParamTraits<PreArg8>::ForwardType pa8) {
    return new MethodClosure_Bind8<false, ClassPointer, MethodClass, PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8>(object, method, pa1, pa2, pa3, pa4, pa5, pa6, pa7, pa8);
}

template <typename ClassPointer, typename MethodClass, typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6, typename PreArg7, typename PreArg8, typename PreArg9>
ClosureBase* NewPermanentClosure(ClassPointer object, void(MethodClass::*method)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8, PreArg9)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3
        , typename ParamTraits<PreArg4>::ForwardType pa4
        , typename ParamTraits<PreArg5>::ForwardType pa5
        , typename ParamTraits<PreArg6>::ForwardType pa6
        , typename ParamTraits<PreArg7>::ForwardType pa7
        , typename ParamTraits<PreArg8>::ForwardType pa8
        , typename ParamTraits<PreArg9>::ForwardType pa9) {
    return new MethodClosure_Bind9<false, ClassPointer, MethodClass, PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8, PreArg9>(object, method, pa1, pa2, pa3, pa4, pa5, pa6, pa7, pa8, pa9);
}

template <typename ClassPointer, typename MethodClass, typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6, typename PreArg7, typename PreArg8, typename PreArg9, typename PreArg10>
ClosureBase* NewPermanentClosure(ClassPointer object, void(MethodClass::*method)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8, PreArg9, PreArg10)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3
        , typename ParamTraits<PreArg4>::ForwardType pa4
        , typename ParamTraits<PreArg5>::ForwardType pa5
        , typename ParamTraits<PreArg6>::ForwardType pa6
        , typename ParamTraits<PreArg7>::ForwardType pa7
        , typename ParamTraits<PreArg8>::ForwardType pa8
        , typename ParamTraits<PreArg9>::ForwardType pa9
        , typename ParamTraits<PreArg10>::ForwardType pa10) {
    return new MethodClosure_Bind10<false, ClassPointer, MethodClass, PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8, PreArg9, PreArg10>(object, method, pa1, pa2, pa3, pa4, pa5, pa6, pa7, pa8, pa9, pa10);
}

////////////////////////////////////////////////////
//////// Closure create helper functions ///////////
////////////////////////////////////////////////////
//////////// for nomal function ////////////////////

inline
ClosureBase* NewClosure(void(*function)()) {
    return new FunctionClosure_Bind0<true>(function);
}

template <typename PreArg1>
ClosureBase* NewClosure(void(*function)(PreArg1)
        , typename ParamTraits<PreArg1>::ForwardType pa1) {
    return new FunctionClosure_Bind1<true, PreArg1>(function, pa1);
}

template <typename PreArg1, typename PreArg2>
ClosureBase* NewClosure(void(*function)(PreArg1, PreArg2)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2) {
    return new FunctionClosure_Bind2<true, PreArg1, PreArg2>(function, pa1, pa2);
}

template <typename PreArg1, typename PreArg2, typename PreArg3>
ClosureBase* NewClosure(void(*function)(PreArg1, PreArg2, PreArg3)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3) {
    return new FunctionClosure_Bind3<true, PreArg1, PreArg2, PreArg3>(function, pa1, pa2, pa3);
}

template <typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4>
ClosureBase* NewClosure(void(*function)(PreArg1, PreArg2, PreArg3, PreArg4)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3
        , typename ParamTraits<PreArg4>::ForwardType pa4) {
    return new FunctionClosure_Bind4<true, PreArg1, PreArg2, PreArg3, PreArg4>(function, pa1, pa2, pa3, pa4);
}

template <typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5>
ClosureBase* NewClosure(void(*function)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3
        , typename ParamTraits<PreArg4>::ForwardType pa4
        , typename ParamTraits<PreArg5>::ForwardType pa5) {
    return new FunctionClosure_Bind5<true, PreArg1, PreArg2, PreArg3, PreArg4, PreArg5>(function, pa1, pa2, pa3, pa4, pa5);
}

template <typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6>
ClosureBase* NewClosure(void(*function)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3
        , typename ParamTraits<PreArg4>::ForwardType pa4
        , typename ParamTraits<PreArg5>::ForwardType pa5
        , typename ParamTraits<PreArg6>::ForwardType pa6) {
    return new FunctionClosure_Bind6<true, PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6>(function, pa1, pa2, pa3, pa4, pa5, pa6);
}

template <typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6, typename PreArg7>
ClosureBase* NewClosure(void(*function)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3
        , typename ParamTraits<PreArg4>::ForwardType pa4
        , typename ParamTraits<PreArg5>::ForwardType pa5
        , typename ParamTraits<PreArg6>::ForwardType pa6
        , typename ParamTraits<PreArg7>::ForwardType pa7) {
    return new FunctionClosure_Bind7<true, PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7>(function, pa1, pa2, pa3, pa4, pa5, pa6, pa7);
}

template <typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6, typename PreArg7, typename PreArg8>
ClosureBase* NewClosure(void(*function)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3
        , typename ParamTraits<PreArg4>::ForwardType pa4
        , typename ParamTraits<PreArg5>::ForwardType pa5
        , typename ParamTraits<PreArg6>::ForwardType pa6
        , typename ParamTraits<PreArg7>::ForwardType pa7
        , typename ParamTraits<PreArg8>::ForwardType pa8) {
    return new FunctionClosure_Bind8<true, PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8>(function, pa1, pa2, pa3, pa4, pa5, pa6, pa7, pa8);
}

template <typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6, typename PreArg7, typename PreArg8, typename PreArg9>
ClosureBase* NewClosure(void(*function)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8, PreArg9)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3
        , typename ParamTraits<PreArg4>::ForwardType pa4
        , typename ParamTraits<PreArg5>::ForwardType pa5
        , typename ParamTraits<PreArg6>::ForwardType pa6
        , typename ParamTraits<PreArg7>::ForwardType pa7
        , typename ParamTraits<PreArg8>::ForwardType pa8
        , typename ParamTraits<PreArg9>::ForwardType pa9) {
    return new FunctionClosure_Bind9<true, PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8, PreArg9>(function, pa1, pa2, pa3, pa4, pa5, pa6, pa7, pa8, pa9);
}

template <typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6, typename PreArg7, typename PreArg8, typename PreArg9, typename PreArg10>
ClosureBase* NewClosure(void(*function)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8, PreArg9, PreArg10)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3
        , typename ParamTraits<PreArg4>::ForwardType pa4
        , typename ParamTraits<PreArg5>::ForwardType pa5
        , typename ParamTraits<PreArg6>::ForwardType pa6
        , typename ParamTraits<PreArg7>::ForwardType pa7
        , typename ParamTraits<PreArg8>::ForwardType pa8
        , typename ParamTraits<PreArg9>::ForwardType pa9
        , typename ParamTraits<PreArg10>::ForwardType pa10) {
    return new FunctionClosure_Bind10<true, PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8, PreArg9, PreArg10>(function, pa1, pa2, pa3, pa4, pa5, pa6, pa7, pa8, pa9, pa10);
}

////////////////////////////////////////////////////
//////// Closure create helper functions ///////////
////////////////////////////////////////////////////
//////////// for nomal function ////////////////////

inline
ClosureBase* NewPermanentClosure(void(*function)()) {
    return new FunctionClosure_Bind0<false>(function);
}

template <typename PreArg1>
ClosureBase* NewPermanentClosure(void(*function)(PreArg1)
        , typename ParamTraits<PreArg1>::ForwardType pa1) {
    return new FunctionClosure_Bind1<false, PreArg1>(function, pa1);
}

template <typename PreArg1, typename PreArg2>
ClosureBase* NewPermanentClosure(void(*function)(PreArg1, PreArg2)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2) {
    return new FunctionClosure_Bind2<false, PreArg1, PreArg2>(function, pa1, pa2);
}

template <typename PreArg1, typename PreArg2, typename PreArg3>
ClosureBase* NewPermanentClosure(void(*function)(PreArg1, PreArg2, PreArg3)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3) {
    return new FunctionClosure_Bind3<false, PreArg1, PreArg2, PreArg3>(function, pa1, pa2, pa3);
}

template <typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4>
ClosureBase* NewPermanentClosure(void(*function)(PreArg1, PreArg2, PreArg3, PreArg4)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3
        , typename ParamTraits<PreArg4>::ForwardType pa4) {
    return new FunctionClosure_Bind4<false, PreArg1, PreArg2, PreArg3, PreArg4>(function, pa1, pa2, pa3, pa4);
}

template <typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5>
ClosureBase* NewPermanentClosure(void(*function)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3
        , typename ParamTraits<PreArg4>::ForwardType pa4
        , typename ParamTraits<PreArg5>::ForwardType pa5) {
    return new FunctionClosure_Bind5<false, PreArg1, PreArg2, PreArg3, PreArg4, PreArg5>(function, pa1, pa2, pa3, pa4, pa5);
}

template <typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6>
ClosureBase* NewPermanentClosure(void(*function)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3
        , typename ParamTraits<PreArg4>::ForwardType pa4
        , typename ParamTraits<PreArg5>::ForwardType pa5
        , typename ParamTraits<PreArg6>::ForwardType pa6) {
    return new FunctionClosure_Bind6<false, PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6>(function, pa1, pa2, pa3, pa4, pa5, pa6);
}

template <typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6, typename PreArg7>
ClosureBase* NewPermanentClosure(void(*function)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3
        , typename ParamTraits<PreArg4>::ForwardType pa4
        , typename ParamTraits<PreArg5>::ForwardType pa5
        , typename ParamTraits<PreArg6>::ForwardType pa6
        , typename ParamTraits<PreArg7>::ForwardType pa7) {
    return new FunctionClosure_Bind7<false, PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7>(function, pa1, pa2, pa3, pa4, pa5, pa6, pa7);
}

template <typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6, typename PreArg7, typename PreArg8>
ClosureBase* NewPermanentClosure(void(*function)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3
        , typename ParamTraits<PreArg4>::ForwardType pa4
        , typename ParamTraits<PreArg5>::ForwardType pa5
        , typename ParamTraits<PreArg6>::ForwardType pa6
        , typename ParamTraits<PreArg7>::ForwardType pa7
        , typename ParamTraits<PreArg8>::ForwardType pa8) {
    return new FunctionClosure_Bind8<false, PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8>(function, pa1, pa2, pa3, pa4, pa5, pa6, pa7, pa8);
}

template <typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6, typename PreArg7, typename PreArg8, typename PreArg9>
ClosureBase* NewPermanentClosure(void(*function)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8, PreArg9)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3
        , typename ParamTraits<PreArg4>::ForwardType pa4
        , typename ParamTraits<PreArg5>::ForwardType pa5
        , typename ParamTraits<PreArg6>::ForwardType pa6
        , typename ParamTraits<PreArg7>::ForwardType pa7
        , typename ParamTraits<PreArg8>::ForwardType pa8
        , typename ParamTraits<PreArg9>::ForwardType pa9) {
    return new FunctionClosure_Bind9<false, PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8, PreArg9>(function, pa1, pa2, pa3, pa4, pa5, pa6, pa7, pa8, pa9);
}

template <typename PreArg1, typename PreArg2, typename PreArg3, typename PreArg4, typename PreArg5, typename PreArg6, typename PreArg7, typename PreArg8, typename PreArg9, typename PreArg10>
ClosureBase* NewPermanentClosure(void(*function)(PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8, PreArg9, PreArg10)
        , typename ParamTraits<PreArg1>::ForwardType pa1
        , typename ParamTraits<PreArg2>::ForwardType pa2
        , typename ParamTraits<PreArg3>::ForwardType pa3
        , typename ParamTraits<PreArg4>::ForwardType pa4
        , typename ParamTraits<PreArg5>::ForwardType pa5
        , typename ParamTraits<PreArg6>::ForwardType pa6
        , typename ParamTraits<PreArg7>::ForwardType pa7
        , typename ParamTraits<PreArg8>::ForwardType pa8
        , typename ParamTraits<PreArg9>::ForwardType pa9
        , typename ParamTraits<PreArg10>::ForwardType pa10) {
    return new FunctionClosure_Bind10<false, PreArg1, PreArg2, PreArg3, PreArg4, PreArg5, PreArg6, PreArg7, PreArg8, PreArg9, PreArg10>(function, pa1, pa2, pa3, pa4, pa5, pa6, pa7, pa8, pa9, pa10);
}

} // namespace pbrpc
} // namespace sofa

#endif // _SOFA_PBRPC_CLOSURE_H_
